1 Lectura y escritura de archivos

Escribir y leer archivos en Java es una tarea común y esencial en la programación. Aquí te explico cómo hacerlo:

A) Escribir en un archivo: 
Para escribir en un archivo en Java, puedes usar la clase FileWriter junto con BufferedWriter. 
Aquí tienes un ejemplo básico:

///////////////////////////////////
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

public class EscribirArchivo {
    public static void main(String[] args) {
        String rutaArchivo = "miArchivo.txt";
        String contenido = "¡Hola, mundo!";

        try (BufferedWriter bw = new BufferedWriter(new FileWriter(rutaArchivo))) {
            bw.write(contenido);
            System.out.println("Archivo escrito satisfactoriamente.");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
/////////////////////////////////////

Este código crea un archivo llamado miArchivo.txt y escribe la cadena ¡Hola, mundo! en él.

B) Leer de un archivo: 

Para leer de un archivo, puedes usar la clase FileReader junto con BufferedReader. 
Aquí tienes un ejemplo:

//////////////////////////////////////////////////
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class LeerArchivo {
    public static void main(String[] args) {
        String rutaArchivo = "miArchivo.txt";

        try (BufferedReader br = new BufferedReader(new FileReader(rutaArchivo))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                System.out.println(linea);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
////////////////////////////////////////////////

Este código lee el contenido del archivo miArchivo.txt y lo imprime en la consola.

Recuerda que siempre debes manejar las excepciones IOException que pueden ocurrir al trabajar con archivos. (puedes verlos en el nivel 1 en el punto 4 manejo de excepciones)

Además, es una buena práctica usar try-with-resources para asegurarte de que los recursos se cierran automáticamente después de su uso.


Nota :

Recuerda que "try-with-resources" se encarga automáticamente de cerrar los recursos cuando ya no son necesarios, incluso si ocurren excepciones.

Impresindible para el manejo de documentos y recursos que puedan seguir consumiendo recursos. 

Este es un ejemplo de cómo podrías usar try-with-resources con un FileInputStream para leer un archivo:


///////////////////////////////////////////
import java.io.*;

public class TryWithResourcesExample {
    public static void main(String[] args) {
        // Definimos el nombre del archivo que queremos leer
        String fileName = "ejemplo.txt";

        // Usamos try-with-resources para abrir el FileInputStream
        try (FileInputStream fis = new FileInputStream(fileName)) {
            int content;
            // Leemos el archivo byte a byte
            while ((content = fis.read()) != -1) {
                // Convertimos el byte a caracter e imprimimos en consola
                System.out.print((char) content);
            }
        } catch (IOException e) {
            // Capturamos cualquier excepción de E/S que ocurra
            e.printStackTrace();
        }
    }
}
//////////////////////////////////////////

En este ejemplo:

1- FileInputStream se abre dentro del bloque try y se declara como un recurso a ser utilizado.
2- No hay necesidad de cerrar explícitamente el FileInputStream con fis.close(). Esto se maneja automáticamente al final del bloque try.
3- Si ocurre alguna excepción dentro del bloque try, el FileInputStream se cerrará automáticamente antes de propagar la excepción hacia afuera.
4- La clase FileInputStream implementa la interfaz AutoCloseable, por lo que es elegible para su uso con try-with-resources.



