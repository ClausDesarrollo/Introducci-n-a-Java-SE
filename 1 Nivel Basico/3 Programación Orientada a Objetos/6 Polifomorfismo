6 Polimorfismo


Es la capacidad de un objeto de comportarse de diferentes maneras según el contexto en el que se utiliza.

En Java conocemos el polimorfismo de subtipos (herencia) y el polimorfismo paramétrico (interfaces y clases genéricas).

1- Polimorfismo de subtipos (herencia):

El polimorfismo de subtipos se logra mediante la herencia. 
En este caso, una clase hija puede ser tratada como su clase padre. 
Esto significa que un objeto de la clase hija puede ser referenciado por una variable de tipo de la clase padre. 
Cuando se llama a un método sobre ese objeto, Java buscará la implementación del método en la clase del objeto real en tiempo de ejecución.

Aquí tienes un ejemplo:


///////////////////////////////////////////////////////////////////
// Clase padre
class Animal {
    public void hacerSonido() {
        System.out.println("El animal hace un sonido.");
    }
}

// Clase hija
class Perro extends Animal {
    public void hacerSonido() {
        System.out.println("El perro ladra.");
    }
}

public class Main {
    public static void main(String[] args) {
        Animal miAnimal = new Perro(); // Objeto Perro referenciado por variable Animal
        miAnimal.hacerSonido(); // Llama al método hacerSonido() de la clase Perro
    }
}

///////////////////////////////////////////////////////////////////


En este ejemplo, aunque la variable miAnimal está declarada como tipo Animal, se refiere a un objeto de tipo Perro.
Cuando se llama al método hacerSonido(), se ejecuta la implementación de Perro, ya que Java determina el método a ejecutar en tiempo de ejecución según el tipo real del objeto.


2- Polimorfismo paramétrico (interfaces y clases genéricas):

Imagina que tienes una caja de juguetes con diferentes tipos de juguetes, como autos, muñecas y pelotas. Todos estos juguetes tienen algo en común: ¡puedes jugar con ellos!

El polimorfismo paramétrico es como tener una regla de juego que se aplica a todos los juguetes de la caja, sin importar qué tipo sean. Por ejemplo, si la regla de juego dice "hacer rodar el juguete", puedes aplicar esta regla tanto a los autos como a las pelotas. No necesitas saber exactamente qué tipo de juguete es, ¡solo necesitas saber que puedes hacerlo rodar!

En términos de programación, imagina que la regla de juego es una función llamada "hacerRodar()" que acepta cualquier tipo de juguete como entrada. Puedes llamar a esta función con un auto, una muñeca o una pelota, ¡y todos ellos podrán rodar porque cumplen con la regla de hacer rodar el juguete!

////////////////////////////////////////////////////////////
// Interfaz
interface Animal {
    void hacerSonido(); // Esta es la regla de juego para todos los animales: 
                        // deben tener un método para hacer un sonido.
}

// Implementación de la interfaz para un perro
class Perro implements Animal {
    public void hacerSonido() {  // Este es el metodo con el que vamos a trabajar
        System.out.println("El perro ladra. guaw guaw"); // Este es el sonido que hace un perro cuando juega.
    // Es decir que se complementan! mientras los animales hacen sonidos , especificamos que queremos el 
    // Sondio que hace el perro 
    }
}

// Clase principal
public class Main {
    // Este método acepta cualquier objeto que implemente la interfaz Animal y llama a su método hacerSonido().
    public static void hacerSonido(Animal animal) {
        animal.hacerSonido(); // Aquí estamos aplicando la regla de juego para que cualquier animal haga un sonido.
    }

    public static void main(String[] args) {
        // Creamos un objeto de tipo Perro y lo referenciamos como un Animal.
        Animal miPerro = new Perro();
        // Llamamos al método hacerSonido(), pero no sabemos si el animal es un perro u otro animal.
        hacerSonido(miPerro); 
        // Llama al método hacerSonido() de la clase Perro, ¡pero podríamos haber pasado cualquier otro tipo de animal aquí!
    }
}


Basicamente el polimorfismo paramétrico nos permite tratar a cualquier objeto que cumpla con una regla de juego (en este caso, implemente la interfaz Animal) de la misma manera, sin importar qué tipo de animal sea realmente. 

En este código, hacerSonido() es la regla de juego que todos los animales deben seguir, y el método main() demuestra cómo podemos aplicar esta regla a un objeto de tipo Perro pero también podríamos haberlo aplicado a cualquier otro tipo de animal que implemente la interfaz Animal.

Es decir que se complementan! 
Regla 1) Todos los animales hacer un sonido
Regla 2) El Perro ladra (guaw guaw)

Asi que al iniciar el juego "main" elegimos el juego Animal y pedimos el sonido que hace el perro



